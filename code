#include <msp430.h> 
/**
 * main.c
 */
void gpioInit();        // Setup the GPIO Pins for controlling the LEDS through PWM (no input arguments)
void timerInit();       // Setup Timer to control the LEDS (no input arguments)
void adcInit();         // Setup ADC to do single, on demand samples (no input arguments)
int readADCSingle();    // Single Read ADC, no input arguments, returns current ADC reading
void setLEDBrightness(int DutyCycle);

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD; // stop watchdog timer

    int DutyCycle;
    gpioInit();
    adcInit();
    timerInit();

    PM5CTL0 &= ~LOCKLPM5;

    while(1){
        int num = (int)readADCSingle();
        DutyCycle=(int)num;
        setLEDBrightness(DutyCycle);
    }
}


/**
 * GPIO INIT
 * Initialize all GPIO Pins. Current Pin configuration:
 * Pin 1.0: OUTPUT, GPIO
 * Pin 1.1: INPUT,  ADC Channel 1
 */
void gpioInit(){
    P1DIR |= BIT6;
    P6SEL0 |= BIT0;
    P6SEL1 &= ~BIT0;

    P1SEL0 |= BIT6;
    P1SEL1 |= BIT6;
}

/**
 * Timer INIT
 * Initialize the Timer Peripheral to control a GPIO Pin with PWM in up mode
 * Timer Mode: Up Mode
 */
void timerInit(){
    TB0CCR0 = 1000-1;                         // PWM Period
    TB0CCTL1 = OUTMOD_7;                      // CCR1 reset/set
    TB0CCR1 = 2000;                            // CCR1 PWM duty cycle

    TB0CTL = TBSSEL__SMCLK | MC__UP | TBCLR;  // SMCLK, up mode, clear TBR
}


/**
 * ADC INIT
 * Initialize the ADC Peripheral to read Single measurements on demand.
 * ADC MODE: Single Sample, Single Conversion
 */
void adcInit(){
    ADCCTL0 |= ADCSHT_2 | ADCON;
    ADCCTL1 |= ADCSHP;
    ADCCTL2 &= ~ADCRES;
    ADCCTL2 |= ADCRES_2;
    ADCMCTL0 |= ADCINCH_1;
}


/**
 * Read Single ADC Sample from Channel 0 of the ADC12 Peripheral
 * Returns an ADC Sample without interrupts.
 */
int readADCSingle(){
     ADCCTL0 |= ADCENC | ADCSC;     // Sampling and conversion start
     while (!(ADCIFG & ADCIFG0));   // Wait for sample to be sampled and converted
     return ADCMEM0;
}

void setLEDBrightness(int DutyCycle){
    TB0CCR1 = DutyCycle;
}
